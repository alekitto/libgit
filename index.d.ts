/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

export interface FetchOptions {
  remote?: string
  prune?: boolean
  credentialsCallback?: (url: string, username?: string) => Credentials
  skipCertificateCheck?: boolean
}
export const enum ReferenceType {
  Direct = 1,
  Symbolic = 2
}
export const enum RepositoryState {
  Clean = 0,
  Merge = 1,
  Revert = 2,
  RevertSequence = 3,
  CherryPick = 4,
  CherryPickSequence = 5,
  Bisect = 6,
  Rebase = 7,
  RebaseInteractive = 8,
  RebaseMerge = 9,
  ApplyMailbox = 10,
  ApplyMailboxOrRebase = 11
}
export const enum ResetType {
  Soft = 0,
  Hard = 1,
  Mixed = 2
}
export const enum Direction {
  Fetch = 0,
  Push = 1
}
export class Commit {
  asObject(repository: Repository): Promise<object>
  oid(): Oid
}
export class Credentials {
  static default(): Credentials
  static usernameAndPassword(username: string, password: string): Credentials
  static sshKeyFromMemory(username: string, publicKey: string | undefined | null, privateKey: string, passphrase?: string | undefined | null): Credentials
}
export class Oid { }
export class Object { }
export class Reference {
  kind(): ReferenceType
  target(): Oid | null
  name(): string | null
}
export class Remote {
  connect(direction: Direction, credentialsCallback?: (...args: any[]) => any | undefined | null): void
  disconnect(): void
  referenceList(): Array<RemoteHead>
}
export class RemoteHead {
  name(): string
  oid(): Oid
  isLocal(): boolean
  localOid(): Oid | null
}
export class Repository {
  static init(path: string, bare?: boolean | undefined | null): Promise<Repository>
  static open(path: string): Promise<Repository>
  static clone(url: string, path: string, recursive?: boolean | undefined | null, fetchOptions?: FetchOptions | undefined | null): Promise<Repository>
  namespace(): Promise<string | null>
  isBare(): boolean
  isEmpty(): Promise<boolean>
  path(): string
  state(): Promise<RepositoryState>
  findCommit(target: Oid): Promise<Commit>
  createRemote(name: string, url: string): Promise<Remote>
  createBranch(name: string, commit: Commit | Oid | string, force: boolean): object
  fetch(options?: FetchOptions | undefined | null): Promise<void>
  getCurrentBranch(): Promise<Reference>
  head(): Promise<Reference>
  reset(target: Commit | Reference | Oid, resetType?: ResetType | undefined | null): Promise<void>
  getReference(reference: string): Promise<Reference>
  getReferenceNames(referenceType?: ReferenceType | undefined | null): Promise<Array<string>>
}
