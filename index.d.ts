/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

export interface FetchOptions {
  remote?: string
  prune?: boolean
  credentialsCallback?: (url: string, username?: string) => Credentials
  skipCertificateCheck?: boolean
}
export const enum ReferenceType {
  Direct = 1,
  Symbolic = 2
}
export const enum RepositoryState {
  Clean = 0,
  Merge = 1,
  Revert = 2,
  RevertSequence = 3,
  CherryPick = 4,
  CherryPickSequence = 5,
  Bisect = 6,
  Rebase = 7,
  RebaseInteractive = 8,
  RebaseMerge = 9,
  ApplyMailbox = 10,
  ApplyMailboxOrRebase = 11
}
export const enum ResetType {
  Soft = 0,
  Hard = 1,
  Mixed = 2
}
export const enum Direction {
  Fetch = 0,
  Push = 1
}
export const enum Sort {
  None = 0,
  Topological = 1,
  Time = 2,
  Reverse = 3
}
export class Commit {
  asObject(): object
  oid(): Oid
  messageRaw(): string | null
  author(): Signature
  committer(): Signature
  getParents(): Array<Commit>
  getTree(): Tree
}
export class Time {
  time: number
  offset: number
}
export class Signature {
  constructor(name: string, email: string, time: Time)
  name(): string | null
  email(): string | null
  time(): Time
}
export class Config {
  setStr(name: string, value: string): void
  setBool(name: string, value: boolean): void
  setI64(name: string, value: number): void
}
export class Credentials {
  static default(): Credentials
  static usernameAndPassword(username: string, password: string): Credentials
  static sshKeyFromMemory(username: string, publicKey: string | undefined | null, privateKey: string, passphrase?: string | undefined | null): Credentials
}
export class Index {
  addPath(path: string): Promise<void>
  writeTree(): Promise<Oid>
}
export class Oid {
  static fromString(val: string): Oid
  toString(): string
  cmp(other: Oid): number
}
export class Object {
  toString(): string
  asTree(): Tree | null
  asCommit(): Commit | null
}
export class Reference {
  toString(): string
  kind(): ReferenceType
  target(): Oid | null
  name(): string | null
}
export class Remote {
  connect(direction: Direction, credentialsCallback?: (url: string, username?: string) => Credentials): Promise<void>
  disconnect(): Promise<void>
  referenceList(): Promise<Array<RemoteHead>>
  push(refSpecs: Array<string>, credentialsCallback?: (url: string, username?: string) => Credentials): Promise<void>
}
export class RemoteHead {
  name(): string
  oid(): Oid
  isLocal(): boolean
  localOid(): Oid | null
}
export class Repository {
  static init(path: string, options?: InitOptions | undefined | null): Promise<Repository>
  static open(path: string): Promise<Repository>
  static clone(url: string, path: string, recursive?: boolean | undefined | null, fetchOptions?: FetchOptions | undefined | null): Promise<Repository>
  namespace(): Promise<string | null>
  isBare(): boolean
  isEmpty(): Promise<boolean>
  path(): string
  checkout(refName: string): Promise<void>
  fastRebase(ontoRef: string): Promise<void>
  state(): Promise<RepositoryState>
  findCommit(target: Oid): Promise<Commit>
  findTree(target: Oid): Promise<Tree>
  createRemote(name: string, url: string): Promise<Remote>
  createBranch(name: string, commit: Commit | Oid | string, force: boolean): object
  getBranchCommit(name: string | Reference): Promise<Commit>
  index(): Promise<Index>
  signature(): Promise<Signature>
  createCommit(updateRef: string | undefined | null, author: Signature, committer: Signature, message: string, tree: Tree, parents: Array<Commit>): Promise<Oid>
  fetch(options?: FetchOptions | undefined | null): Promise<void>
  getCurrentBranch(): Promise<Reference>
  head(): Promise<Reference>
  config(): Promise<Config>
  reset(target: Commit | Reference | Oid, resetType?: ResetType | undefined | null): Promise<void>
  getReference(reference: string): Promise<Reference>
  getReferenceNames(referenceType?: ReferenceType | undefined | null): Promise<Array<string>>
  createRevWalk(): Promise<Revwalk>
}
export class InitOptions {
  constructor()
  setBare(bare: boolean): void
  setInitialHead(head?: string | undefined | null): void
}
export class Revwalk {
  push(oid: Oid): object
  pushRange(range: string): object
  next(): Promise<Oid | null>
  reset(): Promise<void>
  sort(sorts: Array<Sort>): Promise<void>
}
export class Tree {
  oid(): Oid
  entryByPath(path: string): TreeEntry
}
export class TreeEntry {
  oid(): Oid
  isTree(): boolean
  toObject(repository: Repository): object
}
